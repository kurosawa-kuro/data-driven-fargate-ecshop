generator client {
  provider = "prisma-client-js"
}

//  url      = "postgresql://dbmasteruser:><hM[$nYWYo9IiLwjLSw*tJ]QCoClhF8@ls-c5dca5e45b3069dcb242e4c62d9d49109e066d84.cne06q42yf5d.ap-northeast-1.rds.amazonaws.com:5432/dbmaster?sslmode=require"

datasource db {
  provider = "postgresql"
  url      = "postgresql://dbmasteruser:dbmaster@ls-644e915cc7a6ba69ccf824a69cef04d45c847ed5.cps8g04q216q.ap-northeast-1.rds.amazonaws.com:5432/dbmaster?sslmode=require"
}

model User {
  // Cognitoとの連携のため修正
  id              String    @id           // CognitoのsubをIDとして使用
  email           String    @unique
  cognitoId       String    @unique      // Cognito User Pool IDとの紐付け
  
  // 認証関連の情報追加
  emailVerified   Boolean   @default(false)
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // ステータス管理
  status          UserStatus @default(ACTIVE)  // ACTIVE, DISABLED, DELETED など

  // リレーション（既存）
  userRoles       UserRole[]
  viewHistories   ViewHistory[]
  cartItems       CartItem[]
  orders          Order[]
  returns         Return[]
}

enum UserStatus {
  ACTIVE
  DISABLED
  DELETED
}

model Role {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  userRoles       UserRole[]
}

model UserRole {
  userId          String
  roleId          Int
  assignedAt      DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role            Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
}


// 商品関連
model Product {
  id              Int       @id @default(autoincrement())
  name            String
  price           Float
  rating          Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // リレーション
  productCategories ProductCategory[]
  viewHistories   ViewHistory[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  returnItems     ReturnItem[]
}
// カテゴリー
model Category {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  productCategories ProductCategory[]
}

model ProductCategory {
  productId       Int
  categoryId      Int
  assignedAt      DateTime  @default(now())
  
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  category        Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
}


// 閲覧履歴（Random Forest, Logistic Regression用）
model ViewHistory {
  id          Int       @id @default(autoincrement())
  userId      String
  productId   Int
  viewedAt    DateTime  @default(now())

  // リレーション
  user        User      @relation(fields: [userId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
  @@index([userId])
  @@index([productId])
  @@unique([userId, productId, viewedAt])
}

// カート（K-means用）
model CartItem {
  id          Int       @id @default(autoincrement())
  userId      String
  productId   Int
  quantity    Int       @default(1)
  addedAt     DateTime  @default(now())

  // リレーション
  user        User      @relation(fields: [userId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
}

// 購入履歴（Linear Regression, PCA用）
model Order {
  id          Int       @id @default(autoincrement())
  userId      String
  totalAmount Float
  orderedAt   DateTime  @default(now())

  // リレーション
  user        User      @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  returns     Return[]
  @@index([userId])
}

// 購入商品詳細
model OrderItem {
  id          Int       @id @default(autoincrement())
  orderId     Int
  productId   Int
  quantity    Int
  price       Float     // 購入時の価格を保存

  // リレーション
  order       Order     @relation(fields: [orderId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
  @@index([orderId])
  @@index([productId])
}

model UserActionLog {
  id          Int       @id @default(autoincrement())
  requestID   String?   // リクエストIDを追加
  userId      String
  actionType  ActionType


  // 商品関連のアクション用
  productId   Int?

  // カート関連のアクション用
  cartItemId  Int?
  quantity    Int?      // CART_UPDATE用
  savedForLater Boolean? // CART_SAVE_FOR_LATER用

  // チェックアウト関連のアクション用
  orderId     Int?
  paymentErrorDetails String? // PAYMENT_ERROR用

  // 返品関連のアクション用
  returnId    Int?
  returnReason String? // RETURN_REQUESTED用

  // レビュー関連のアクション用
  reviewText  String?  // PRODUCT_REVIEW用
  rating      Float?   // PRODUCT_REVIEW用

  // ユーザーアクション関連
  deleteReason String?   // DELETE_ACCOUNT用

  // メタデータフィールド
  metadata    Json?
  createdAt   DateTime  @default(now())

  @@index([userId, actionType, createdAt])
  @@index([requestID])  // リクエストIDのインデックスを追加
}

enum ActionType {
  // カート操作（在庫影響）
  CART_ADD
  CART_REMOVE
  CART_UPDATE

  // 購入・返品（売上影響）
  COMPLETE_ORDER
  ORDER_CANCEL
  RETURN_REQUESTED
  RETURN_COMPLETED

  // ユーザーアカウント管理
  USER_REGISTER_START
  USER_REGISTER_COMPLETE
  PROFILE_UPDATE
  USER_LOGIN
  USER_LOGOUT
  DELETE_ACCOUNT
}

model Return {
  id           Int       @id @default(autoincrement())
  orderId      Int
  userId       String
  returnedAt   DateTime  @default(now())
  status       ReturnStatus @default(REQUESTED)
  reason       String
  
  order        Order     @relation(fields: [orderId], references: [id])
  returnItems  ReturnItem[]
  user         User      @relation(fields: [userId], references: [id])

  @@index([orderId])
  @@index([userId])
}

model ReturnItem {
  id          Int       @id @default(autoincrement())
  returnId    Int
  productId   Int
  quantity    Int
  
  return      Return    @relation(fields: [returnId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])

  @@index([returnId])
  @@index([productId])
}

enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  COMPLETED
}