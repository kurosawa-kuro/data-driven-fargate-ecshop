generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DB_URL")
}

model User {
  // Cognitoとの連携のため修正
  id              String    @id           // CognitoのsubをIDとして使用
  email           String    @unique
  cognitoId       String    @unique      // Cognito User Pool IDとの紐付け
  
  // 認証関連の情報追加
  emailVerified   Boolean   @default(false)
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // ステータス管理
  status          UserStatus @default(ACTIVE)  // ACTIVE, DISABLED, DELETED など

  // リレーション（既存）
  userRoles       UserRole[]
  viewHistories   ViewHistory[]
  cartItems       CartItem[]
  orders          Order[]
  returns         Return[]
}

enum UserStatus {
  ACTIVE
  DISABLED
  DELETED
}

model Role {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  userRoles       UserRole[]
}

model UserRole {
  userId          String
  roleId          Int
  assignedAt      DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role            Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
}


// 商品関連
model Product {
  id              Int       @id @default(autoincrement())
  name            String
  price           Float
  rating          Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // リレーション
  productCategories ProductCategory[]
  viewHistories   ViewHistory[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  returnItems     ReturnItem[]
}
// カテゴリー
model Category {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  productCategories ProductCategory[]
}

model ProductCategory {
  productId       Int
  categoryId      Int
  assignedAt      DateTime  @default(now())
  
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  category        Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
}


// 閲覧履歴（Random Forest, Logistic Regression用）
model ViewHistory {
  id          Int       @id @default(autoincrement())
  userId      String
  productId   Int
  viewedAt    DateTime  @default(now())

  // リレーション
  user        User      @relation(fields: [userId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
  @@index([userId])
  @@index([productId])
  @@unique([userId, productId, viewedAt])
}

// カート（K-means用）
model CartItem {
  id          Int       @id @default(autoincrement())
  userId      String
  productId   Int
  quantity    Int       @default(1)
  addedAt     DateTime  @default(now())

  // リレーション
  user        User      @relation(fields: [userId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
}

// 購入履歴（Linear Regression, PCA用）
model Order {
  id          Int       @id @default(autoincrement())
  userId      String
  totalAmount Float
  orderedAt   DateTime  @default(now())

  // リレーション
  user        User      @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  returns     Return[]
  @@index([userId])
}

// 購入商品詳細
model OrderItem {
  id          Int       @id @default(autoincrement())
  orderId     Int
  productId   Int
  quantity    Int
  price       Float     // 購入時の価格を保存

  // リレーション
  order       Order     @relation(fields: [orderId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
  @@index([orderId])
  @@index([productId])
}

enum ActionType {
  // カート操作
  CART_ADD             // 商品追加
  CART_REMOVE         // 削除
  CART_UPDATE         // 数量更新
  CART_READD          // 再購入

  // 注文
  ORDER_COMPLETE      // 完了
  ORDER_CANCEL        // キャンセル
  ORDER_RETURN_REQUEST // 返品リクエスト
  ORDER_RETURN_COMPLETE // 返品完了

  // 検索
  SEARCH_BY_KEYWORD   // キーワード検索
  SEARCH_BY_CATEGORY  // カテゴリ検索

  // レビュー
  REVIEW_START        // 開始
  REVIEW_SUBMIT       // 投稿

  // アカウント
  USER_REGISTER_START // 登録開始
  USER_REGISTER_COMPLETE // 登録完了
  USER_UPDATE         // 更新
  USER_LOGIN          // ログイン
  USER_LOGOUT         // ログアウト
  USER_DELETE         // 削除
}

model UserActionLog {
  id          Int       @id @default(autoincrement())
  requestID   String?   
  userId      String
  actionType  ActionType

  // 製品情報
  productId   Int?
  productName String?
  productPrice Float?
  categoryId  Int?
  categoryName String?
  
  // トランザクション情報
  cartItemId  Int?
  orderId     Int?
  returnId    Int?
  quantity    Int?
  
  // 検索情報
  searchKeyword   String?   // キーワード検索時の検索語
  searchCategoryId Int?    // カテゴリ検索時のカテゴリID
  searchCategoryName String? // カテゴリ検索時のカテゴリ名

  // コンテンツ
  reviewText    String?   // レビュー本文
  rating        Float?    // 評価
  actionReason  String?   // 理由（返品、削除等）
  errorDetails  String?   // エラー詳細

  // システム情報
  metadata    Json?      // {userAgent, ipAddress, platform, referrer, etc}
  createdAt   DateTime   @default(now())

  @@index([userId, actionType, createdAt])
  @@index([requestID])
}

model Return {
  id           Int       @id @default(autoincrement())
  orderId      Int
  userId       String
  returnedAt   DateTime  @default(now())
  status       ReturnStatus @default(REQUESTED)
  reason       String
  
  order        Order     @relation(fields: [orderId], references: [id])
  returnItems  ReturnItem[]
  user         User      @relation(fields: [userId], references: [id])

  @@index([orderId])
  @@index([userId])
}

model ReturnItem {
  id          Int       @id @default(autoincrement())
  returnId    Int
  productId   Int
  quantity    Int
  
  return      Return    @relation(fields: [returnId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])

  @@index([returnId])
  @@index([productId])
}

enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  COMPLETED
}